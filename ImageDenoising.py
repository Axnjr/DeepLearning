# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1utIRQ1pOwe49hmKyi4NDxXw8OeNUlsqH
"""

# yakshit chhipa | 121a9011 | b1 | dl_6

!pip install tensorflow
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist, fashion_mnist, cifar10

def add_noise(images, noise_factor=0.5):
    noisy_images = images + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=images.shape)
    return np.clip(noisy_images, 0., 1.)

def load_data():
    # Load datasets
    (x_train_mnist, _), (x_test_mnist, _) = mnist.load_data()
    (x_train_fashion, _), (x_test_fashion, _) = fashion_mnist.load_data()
    (x_train_cifar, _), (x_test_cifar, _) = cifar10.load_data()

    # Normalize and preprocess MNIST and Fashion MNIST
    x_train_mnist = x_train_mnist.astype('float32') / 255.0
    x_test_mnist = x_test_mnist.astype('float32') / 255.0
    x_train_fashion = x_train_fashion.astype('float32') / 255.0
    x_test_fashion = x_test_fashion.astype('float32') / 255.0

    # Flatten MNIST and Fashion MNIST
    x_train_mnist = x_train_mnist.reshape((x_train_mnist.shape[0], 28, 28, 1))
    x_test_mnist = x_test_mnist.reshape((x_test_mnist.shape[0], 28, 28, 1))
    x_train_fashion = x_train_fashion.reshape((x_train_fashion.shape[0], 28, 28, 1))
    x_test_fashion = x_test_fashion.reshape((x_test_fashion.shape[0], 28, 28, 1))

    # Normalize and preprocess CIFAR-10
    x_train_cifar = x_train_cifar.astype('float32') / 255.0
    x_test_cifar = x_test_cifar.astype('float32') / 255.0

    return (x_train_mnist, x_test_mnist), (x_train_fashion, x_test_fashion), (x_train_cifar, x_test_cifar)

def create_autoencoder(input_shape):
    model = models.Sequential()
    # Encoder
    model.add(layers.InputLayer(input_shape=input_shape))
    model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))
    model.add(layers.MaxPooling2D((2, 2), padding='same'))
    model.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same'))
    model.add(layers.MaxPooling2D((2, 2), padding='same'))
    model.add(layers.Conv2D(8, (3, 3), activation='relu', padding='same'))
    model.add(layers.MaxPooling2D((2, 2), padding='same'))

    # Decoder
    model.add(layers.Conv2D(8, (3, 3), activation='relu', padding='same'))
    model.add(layers.UpSampling2D((2, 2)))
    model.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same'))
    model.add(layers.UpSampling2D((2, 2)))
    model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))
    model.add(layers.UpSampling2D((2, 2)))
    model.add(layers.Conv2D(1 if input_shape[2] == 1 else 3, (3, 3), activation='sigmoid', padding='same'))

    return model

def train_autoencoder(dataset, input_shape, noise_factor=0.5, epochs=10, batch_size=128):
    (x_train, x_test) = dataset
    x_train_noisy = add_noise(x_train, noise_factor)
    x_test_noisy = add_noise(x_test, noise_factor)

    autoencoder = create_autoencoder(input_shape)
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')

    # Fit the model
    autoencoder.fit(x_train_noisy, x_train,
                    epochs=epochs,
                    batch_size=batch_size,
                    validation_data=(x_test_noisy, x_test))
    return autoencoder, x_test_noisy, x_test

def visualize_denoising(autoencoder, noisy_images, original_images, n=10):
    decoded_images = autoencoder.predict(noisy_images)

    plt.figure(figsize=(20, 4))
    for i in range(n):
        # Display original
        ax = plt.subplot(3, n, i + 1)
        plt.imshow(original_images[i].reshape(28, 28), cmap='gray')
        plt.title("Original")
        plt.axis('off')

        # Display noisy
        ax = plt.subplot(3, n, i + 1 + n)
        plt.imshow(noisy_images[i].reshape(28, 28), cmap='gray')
        plt.title("Noisy")
        plt.axis('off')

        # Display reconstruction
        ax = plt.subplot(3, n, i + 1 + 2 * n)
        plt.imshow(decoded_images[i].reshape(28, 28), cmap='gray')
        plt.title("Denoised")
        plt.axis('off')
    plt.show()